/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.mde.spec.spec.OpenCommand
import org.mde.spec.spec.ClickCommand
import org.mde.spec.spec.SpecPackage
import org.mde.spec.spec.SelectCommand
import org.mde.spec.spec.Selector
import org.mde.spec.spec.PropertyCommand
import org.mde.spec.spec.Condition
import org.mde.spec.spec.TypeCommand
import org.mde.spec.spec.SleepCommand
import org.mde.spec.spec.UsingCommand
import org.mde.spec.spec.Command

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SpecGenerator extends AbstractGenerator {
	var recentSelector = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		generateTestScript(resource, fsa, context);
		generateMainScript(resource, fsa, context);
		generatePackageJSON(resource, fsa, context);
	}
	
	private def generatePackageJSON(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("package.json", '''
			{
				"dependencies": {
					"selenium-webdriver": "^4.0.0-beta.2"
				}
			}
		''');
	}
	
	private def generateMainScript(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("run.js",'''
			const process = require('child_process');
			
			function outputCallback(error, stdout, stderr) {
				if (error) {
					console.error(`exec error: ${error}`);
					return;
				}
				console.log(`stdout: ${stdout}`);
				console.error(`stderr: ${stderr}`);
			}
			
			async function run() {
				await process.exec("npm install", (error, stdout, stderr) => outputCallback(error, stdout, stderr));
				
				process.exec("start cmd.exe /K «resource.URI.lastSegment».js", (error, stdout, stderr) => outputCallback(error, stdout, stderr));
			}
			
			run();
			'''
		)
	}
	
	private def generateTestScript(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(resource.URI.lastSegment + ".js", 
			'''
			const {Builder, By, until} = require('selenium-webdriver');
			const test = require('selenium-webdriver/testing');
			const assert = require('assert');
				
			describe('«resource.URI.lastSegment»', function() {
			  let driver;
				
			  before(async () => {
			    const d = await new Builder().forBrowser('«
			    	getBrowserName(resource)
			    	»').build();
			    	driver = d;
			  });
			  
			  it('test', async () => {«'\n'»
			      '''+ resource.allContents.filter[x | x instanceof Command]
				.map[x | generateCommand(x as Command)]
				.join("")
			  +
			'''
			  }).timeout(10000);
			  	
			    after(() => {
			      return driver.quit();
			    });
			   });
			''' 
		)
	}
	
	dispatch def generateCommand(Command c) ''''''
	dispatch def generateCommand(SleepCommand sc) '''    await driver.sleep(«sc.time * 1000»)«'\n'»'''
	dispatch def generateCommand(TypeCommand tc) '''    await driver.findElement(By.name('«getMostRecentSelector()»')).sendKeys('«IF (tc.str !== null)»«tc.str.toString»«ELSE»«tc.^var.value»«ENDIF»')«'\n'»'''
	dispatch def generateCommand(PropertyCommand pc) {
			'''    await driver.findElement(By.name('«getMostRecentSelector()»')).getText()
				       .then(textValue => {
			        ''' + generateCondition(pc) +
			      '''});«'\n'»'''
		}
		
	dispatch def generateCommand(OpenCommand oc) '''    await driver.get("« IF (oc.^val === null) »« oc.^var.value.toString »« ELSE »« oc.^val.toString »« ENDIF »")«'\n'»'''
	dispatch def generateCommand(ClickCommand cc) '''
			«IF (cc.eIsSet(SpecPackage.Literals.CLICK_COMMAND__POINT))»    await actions.move_to_element_with_offset(driver.find_element_by_tag_name('body'), 0,0)«'\n'»
				await actions.move_by_offset(«cc.point.x», «cc.point.y»).click().perform()«'\n'»
			«ELSE»    await driver.findElement(By.name('« generateSelector(cc.selector) »')).click()«'\n'»
			«ENDIF»
		'''
	dispatch def generateCommand(SelectCommand sc) '''    await driver.findElement(By.name('« generateSelector(sc.value) »'))«'\n'»'''
	
	def generateSelector(Selector s) {
		recentSelector = (s.^val !== null) ? s.^val.toString : s.^var.value.toString
		
		return '''« IF (s.^var !== null) »« s.^var.value.toString »« ELSE »« s.^val.toString »« ENDIF »'''
	}
		
		
	def generateCondition(PropertyCommand pc)
		'''«IF (pc.cond === Condition.SHOULD_BE)» assert.equal(textValue , "«generatePropertyValOrVar(pc)»")«ELSE» assert.equal(textValue , "«generatePropertyValOrVar(pc)»")«ENDIF»'''
	
	def generatePropertyValOrVar(PropertyCommand pc) 
		'''« IF (pc.^val === null) »« pc.^var.value.toString »« ELSE »« pc.^val.toString »« ENDIF »'''
		
	def getBrowserName(Resource resource) {
		resource.allContents.filter(UsingCommand).head.browser.toString.toLowerCase
	}
	
	def getMostRecentSelector() {
		return recentSelector
	}
	
}
