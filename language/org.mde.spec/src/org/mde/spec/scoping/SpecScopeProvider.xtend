/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference
import static extension org.eclipse.xtext.EcoreUtil2.*

import static org.eclipse.xtext.scoping.Scopes.*
import org.mde.spec.spec.VarDeclaration
import org.mde.spec.spec.Model
import org.mde.spec.spec.Selector

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SpecScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_VarDeclaration_var(VarDeclaration context, EReference ref) {
		val containingSelector = context.getContainerOfType(Selector)
		
		if (containingSelector !== null) {
			containingSelector.visibleVariableScope
		}	
		else {
			val containingProgram = context.getContainerOfType(Model)
			scopeFor(containingProgram.commands.filter(VarDeclaration))
		}
	}
	
	def IScope visibleVariableScope(EObject context) {
		if (context instanceof Selector) {
			scopeFor(context.eAllContentsAsList.filter(VarDeclaration), context.eContainer.visibleVariableScope)
		}
		else if (context instanceof Model) {
			scopeFor(context.commands.filter(VarDeclaration))
		}
	}
}