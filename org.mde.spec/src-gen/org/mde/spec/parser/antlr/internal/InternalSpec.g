/*
 * generated by Xtext 2.20.0
 */
grammar InternalSpec;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mde.spec.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mde.spec.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mde.spec.services.SpecGrammarAccess;

}

@parser::members {

 	private SpecGrammarAccess grammarAccess;

    public InternalSpecParser(TokenStream input, SpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0());
			}
			lv_commands_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"commands",
					lv_commands_0_0,
					"org.mde.spec.Spec.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getOpenCommandParserRuleCall_0());
		}
		this_OpenCommand_0=ruleOpenCommand
		{
			$current = $this_OpenCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getClickCommandParserRuleCall_1());
		}
		this_ClickCommand_1=ruleClickCommand
		{
			$current = $this_ClickCommand_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getStoreCommandParserRuleCall_2());
		}
		this_StoreCommand_2=ruleStoreCommand
		{
			$current = $this_StoreCommand_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getSelectCommandParserRuleCall_3());
		}
		this_SelectCommand_3=ruleSelectCommand
		{
			$current = $this_SelectCommand_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getRememberCommandParserRuleCall_4());
		}
		this_RememberCommand_4=ruleRememberCommand
		{
			$current = $this_RememberCommand_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getPropertyCommandParserRuleCall_5());
		}
		this_PropertyCommand_5=rulePropertyCommand
		{
			$current = $this_PropertyCommand_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getTypeCommandParserRuleCall_6());
		}
		this_TypeCommand_6=ruleTypeCommand
		{
			$current = $this_TypeCommand_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getSleepCommandParserRuleCall_7());
		}
		this_SleepCommand_7=ruleSleepCommand
		{
			$current = $this_SleepCommand_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				lv_comment_8_0=RULE_SL_COMMENT
				{
					newLeafNode(lv_comment_8_0, grammarAccess.getCommandAccess().getCommentSL_COMMENTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_8_0,
						"org.mde.spec.Spec.SL_COMMENT");
				}
			)
		)
		    |
		(
			(
				lv_custom_9_0=RULE_CUSTOM_COMMAND
				{
					newLeafNode(lv_custom_9_0, grammarAccess.getCommandAccess().getCustomCUSTOM_COMMANDTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommandRule());
					}
					setWithLastConsumed(
						$current,
						"custom",
						lv_custom_9_0,
						"org.mde.spec.Spec.CUSTOM_COMMAND");
				}
			)
		)
	)
;

// Entry rule entryRuleOpenCommand
entryRuleOpenCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenCommandRule()); }
	iv_ruleOpenCommand=ruleOpenCommand
	{ $current=$iv_ruleOpenCommand.current; }
	EOF;

// Rule OpenCommand
ruleOpenCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpenCommandAccess().getOpenCommandAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0='Open'
				{
					newLeafNode(lv_name_1_0, grammarAccess.getOpenCommandAccess().getNameOpenKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_1_0, "Open");
				}
			)
		)
		(
			(
				(
					lv_val_2_0=RULE_STRING
					{
						newLeafNode(lv_val_2_0, grammarAccess.getOpenCommandAccess().getValSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOpenCommandRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenCommandAccess().getVarVariableParserRuleCall_2_1_0());
					}
					lv_var_3_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenCommandRule());
						}
						set(
							$current,
							"var",
							lv_var_3_0,
							"org.mde.spec.Spec.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClickCommand
entryRuleClickCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickCommandRule()); }
	iv_ruleClickCommand=ruleClickCommand
	{ $current=$iv_ruleClickCommand.current; }
	EOF;

// Rule ClickCommand
ruleClickCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Click'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getClickCommandAccess().getNameClickKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClickCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Click");
				}
			)
		)
		(
			(
				otherlv_1='on'
				{
					newLeafNode(otherlv_1, grammarAccess.getClickCommandAccess().getOnKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getClickCommandAccess().getSelectorSelectorParserRuleCall_1_0_1_0());
						}
						lv_selector_2_0=ruleSelector
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClickCommandRule());
							}
							set(
								$current,
								"selector",
								lv_selector_2_0,
								"org.mde.spec.Spec.Selector");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_3='at'
				{
					newLeafNode(otherlv_3, grammarAccess.getClickCommandAccess().getAtKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getClickCommandAccess().getPointPointParserRuleCall_1_1_1_0());
						}
						lv_point_4_0=rulePoint
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getClickCommandRule());
							}
							set(
								$current,
								"point",
								lv_point_4_0,
								"org.mde.spec.Spec.Point");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleSelectCommand
entryRuleSelectCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectCommandRule()); }
	iv_ruleSelectCommand=ruleSelectCommand
	{ $current=$iv_ruleSelectCommand.current; }
	EOF;

// Rule SelectCommand
ruleSelectCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0='Within'
					{
						newLeafNode(lv_name_0_0, grammarAccess.getSelectCommandAccess().getNameWithinKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectCommandRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_0, "Within");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectCommandRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.mde.spec.Spec.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_name_2_0='Select'
					{
						newLeafNode(lv_name_2_0, grammarAccess.getSelectCommandAccess().getNameSelectKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectCommandRule());
						}
						setWithLastConsumed($current, "name", lv_name_2_0, "Select");
					}
				)
			)
			(
				otherlv_3='visible'
				{
					newLeafNode(otherlv_3, grammarAccess.getSelectCommandAccess().getVisibleKeyword_1_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_1_2_0());
					}
					lv_value_4_0=ruleSelector
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectCommandRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"org.mde.spec.Spec.Selector");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectorAccess().getTypeElementTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectorRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.mde.spec.Spec.ElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				otherlv_1='$'
				{
					newLeafNode(otherlv_1, grammarAccess.getSelectorAccess().getDollarSignKeyword_1_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSelectorRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getVarVariableCrossReference_1_0_1_0());
						}
					)
				)
			)
			    |
			(
				(
					lv_str_3_0=RULE_STRING
					{
						newLeafNode(lv_str_3_0, grammarAccess.getSelectorAccess().getStrSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStoreCommand
entryRuleStoreCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoreCommandRule()); }
	iv_ruleStoreCommand=ruleStoreCommand
	{ $current=$iv_ruleStoreCommand.current; }
	EOF;

// Rule StoreCommand
ruleStoreCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Store'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getStoreCommandAccess().getNameStoreKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoreCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Store");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStoreCommandAccess().getVarVariableParserRuleCall_1_0());
				}
				lv_var_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoreCommandRule());
					}
					set(
						$current,
						"var",
						lv_var_1_0,
						"org.mde.spec.Spec.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getStoreCommandAccess().getAsKeyword_2());
		}
		(
			(
				lv_val_3_0=RULE_STRING
				{
					newLeafNode(lv_val_3_0, grammarAccess.getStoreCommandAccess().getValSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoreCommandRule());
					}
					setWithLastConsumed(
						$current,
						"val",
						lv_val_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRememberCommand
entryRuleRememberCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRememberCommandRule()); }
	iv_ruleRememberCommand=ruleRememberCommand
	{ $current=$iv_ruleRememberCommand.current; }
	EOF;

// Rule RememberCommand
ruleRememberCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Remember'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRememberCommandAccess().getNameRememberKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRememberCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Remember");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRememberCommandAccess().getPropPropertyParserRuleCall_1_0());
				}
				lv_prop_1_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRememberCommandRule());
					}
					set(
						$current,
						"prop",
						lv_prop_1_0,
						"org.mde.spec.Spec.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getRememberCommandAccess().getAsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRememberCommandAccess().getVarVariableParserRuleCall_3_0());
				}
				lv_var_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRememberCommandRule());
					}
					set(
						$current,
						"var",
						lv_var_3_0,
						"org.mde.spec.Spec.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePropertyCommand
entryRulePropertyCommand returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getPropertyCommandRule()); }
	iv_rulePropertyCommand=rulePropertyCommand
	{ $current=$iv_rulePropertyCommand.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule PropertyCommand
rulePropertyCommand returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Property'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPropertyCommandAccess().getNamePropertyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Property");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyCommandAccess().getPropPropertyParserRuleCall_1_0());
				}
				lv_prop_1_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyCommandRule());
					}
					set(
						$current,
						"prop",
						lv_prop_1_0,
						"org.mde.spec.Spec.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyCommandAccess().getCondConditionParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"org.mde.spec.Spec.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_val_3_0=RULE_STRING
					{
						newLeafNode(lv_val_3_0, grammarAccess.getPropertyCommandAccess().getValSTRINGTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertyCommandRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				otherlv_4='$'
				{
					newLeafNode(otherlv_4, grammarAccess.getPropertyCommandAccess().getDollarSignKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPropertyCommandRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getPropertyCommandAccess().getVarVariableCrossReference_3_1_1_0());
						}
					)
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleProperty
entryRuleProperty returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current.getText(); }
	EOF;

// Rule Property
ruleProperty returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='text'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getTextKeyword_0());
		}
		    |
		kw='class'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getClassKeyword_1());
		}
		    |
		kw='value'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPropertyAccess().getValueKeyword_2());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current.getText(); }
	EOF;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='should'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionAccess().getShouldKeyword_0_0());
			}
			kw='be'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionAccess().getBeKeyword_0_1());
			}
		)
		    |
		(
			kw='should'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionAccess().getShouldKeyword_1_0());
			}
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionAccess().getNotKeyword_1_1());
			}
			kw='be'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConditionAccess().getBeKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleTypeCommand
entryRuleTypeCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCommandRule()); }
	iv_ruleTypeCommand=ruleTypeCommand
	{ $current=$iv_ruleTypeCommand.current; }
	EOF;

// Rule TypeCommand
ruleTypeCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Type'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeCommandAccess().getNameTypeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Type");
				}
			)
		)
		(
			(
				(
					lv_str_1_0=RULE_STRING
					{
						newLeafNode(lv_str_1_0, grammarAccess.getTypeCommandAccess().getStrSTRINGTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCommandRule());
						}
						setWithLastConsumed(
							$current,
							"str",
							lv_str_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeCommandRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getTypeCommandAccess().getVarVariableCrossReference_1_1_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSleepCommand
entryRuleSleepCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSleepCommandRule()); }
	iv_ruleSleepCommand=ruleSleepCommand
	{ $current=$iv_ruleSleepCommand.current; }
	EOF;

// Rule SleepCommand
ruleSleepCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='Sleep'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSleepCommandAccess().getNameSleepKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSleepCommandRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "Sleep");
				}
			)
		)
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getSleepCommandAccess().getForKeyword_1());
		}
		(
			(
				lv_time_2_0=RULE_INT
				{
					newLeafNode(lv_time_2_0, grammarAccess.getSleepCommandAccess().getTimeINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSleepCommandRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_3='second'
			{
				newLeafNode(otherlv_3, grammarAccess.getSleepCommandAccess().getSecondKeyword_3_0());
			}
			    |
			otherlv_4='seconds'
			{
				newLeafNode(otherlv_4, grammarAccess.getSleepCommandAccess().getSecondsKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current.getText(); }
	EOF;

// Rule Point
rulePoint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointAccess().getLeftCurlyBracketKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getPointAccess().getINTTerminalRuleCall_1());
		}
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointAccess().getCommaKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getPointAccess().getINTTerminalRuleCall_3());
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='$'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getDollarSignKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Rule ElementType
ruleElementType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='button'
			{
				$current = grammarAccess.getElementTypeAccess().getButtonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getElementTypeAccess().getButtonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='element'
			{
				$current = grammarAccess.getElementTypeAccess().getElementEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getElementTypeAccess().getElementEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='link'
			{
				$current = grammarAccess.getElementTypeAccess().getLinkEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getElementTypeAccess().getLinkEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='input'
			{
				$current = grammarAccess.getElementTypeAccess().getInputEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getElementTypeAccess().getInputEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='textarea'
			{
				$current = grammarAccess.getElementTypeAccess().getTextareaEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getElementTypeAccess().getTextareaEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_CUSTOM_COMMAND : '!' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
