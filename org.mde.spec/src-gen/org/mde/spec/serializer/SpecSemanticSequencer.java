/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mde.spec.services.SpecGrammarAccess;
import org.mde.spec.spec.ClickCommand;
import org.mde.spec.spec.CommentCommand;
import org.mde.spec.spec.CustomCommand;
import org.mde.spec.spec.Model;
import org.mde.spec.spec.OpenCommand;
import org.mde.spec.spec.PropertyCommand;
import org.mde.spec.spec.RememberCommand;
import org.mde.spec.spec.SelectCommand;
import org.mde.spec.spec.Selector;
import org.mde.spec.spec.SleepCommand;
import org.mde.spec.spec.SpecPackage;
import org.mde.spec.spec.TypeCommand;
import org.mde.spec.spec.Value;
import org.mde.spec.spec.Variable;

@SuppressWarnings("all")
public class SpecSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SpecGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SpecPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpecPackage.CLICK_COMMAND:
				sequence_ClickCommand(context, (ClickCommand) semanticObject); 
				return; 
			case SpecPackage.COMMENT_COMMAND:
				sequence_CommentCommand(context, (CommentCommand) semanticObject); 
				return; 
			case SpecPackage.CUSTOM_COMMAND:
				sequence_CustomCommand(context, (CustomCommand) semanticObject); 
				return; 
			case SpecPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SpecPackage.OPEN_COMMAND:
				sequence_OpenCommand(context, (OpenCommand) semanticObject); 
				return; 
			case SpecPackage.PROPERTY_COMMAND:
				sequence_PropertyCommand(context, (PropertyCommand) semanticObject); 
				return; 
			case SpecPackage.REMEMBER_COMMAND:
				sequence_RememberCommand(context, (RememberCommand) semanticObject); 
				return; 
			case SpecPackage.SELECT_COMMAND:
				sequence_SelectCommand(context, (SelectCommand) semanticObject); 
				return; 
			case SpecPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case SpecPackage.SLEEP_COMMAND:
				sequence_SleepCommand(context, (SleepCommand) semanticObject); 
				return; 
			case SpecPackage.TYPE_COMMAND:
				sequence_TypeCommand(context, (TypeCommand) semanticObject); 
				return; 
			case SpecPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case SpecPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns ClickCommand
	 *     ClickCommand returns ClickCommand
	 *
	 * Constraint:
	 *     (cmd='Click' | selector=Selector | point=Point)
	 */
	protected void sequence_ClickCommand(ISerializationContext context, ClickCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CommentCommand
	 *     CommentCommand returns CommentCommand
	 *
	 * Constraint:
	 *     str=STRING
	 */
	protected void sequence_CommentCommand(ISerializationContext context, CommentCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.COMMENT_COMMAND__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.COMMENT_COMMAND__STR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommentCommandAccess().getStrSTRINGTerminalRuleCall_1_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns CustomCommand
	 *     CustomCommand returns CustomCommand
	 *
	 * Constraint:
	 *     command=STRING
	 */
	protected void sequence_CustomCommand(ISerializationContext context, CustomCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.CUSTOM_COMMAND__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.CUSTOM_COMMAND__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCustomCommandAccess().getCommandSTRINGTerminalRuleCall_1_0(), semanticObject.getCommand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns OpenCommand
	 *     OpenCommand returns OpenCommand
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_OpenCommand(ISerializationContext context, OpenCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.OPEN_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.OPEN_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpenCommandAccess().getValueValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns PropertyCommand
	 *     PropertyCommand returns PropertyCommand
	 *
	 * Constraint:
	 *     (prop=Property cond=Condition val=Value)
	 */
	protected void sequence_PropertyCommand(ISerializationContext context, PropertyCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__PROP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__PROP));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__COND));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyCommandAccess().getPropPropertyParserRuleCall_1_0(), semanticObject.getProp());
		feeder.accept(grammarAccess.getPropertyCommandAccess().getCondConditionParserRuleCall_2_0(), semanticObject.getCond());
		feeder.accept(grammarAccess.getPropertyCommandAccess().getValValueParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns RememberCommand
	 *     RememberCommand returns RememberCommand
	 *
	 * Constraint:
	 *     (prop=Property var=Variable)
	 */
	protected void sequence_RememberCommand(ISerializationContext context, RememberCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__PROP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__PROP));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRememberCommandAccess().getPropPropertyParserRuleCall_1_0(), semanticObject.getProp());
		feeder.accept(grammarAccess.getRememberCommandAccess().getVarVariableParserRuleCall_3_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns SelectCommand
	 *     SelectCommand returns SelectCommand
	 *
	 * Constraint:
	 *     (value=Selector | value=Selector | value=Selector)
	 */
	protected void sequence_SelectCommand(ISerializationContext context, SelectCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (val=STRING | (type=ElementType val=STRING) | var=Variable | (type=ElementType var=Variable))
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns SleepCommand
	 *     SleepCommand returns SleepCommand
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_SleepCommand(ISerializationContext context, SleepCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.SLEEP_COMMAND__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.SLEEP_COMMAND__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSleepCommandAccess().getTimeINTTerminalRuleCall_2_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TypeCommand
	 *     TypeCommand returns TypeCommand
	 *
	 * Constraint:
	 *     val=Value
	 */
	protected void sequence_TypeCommand(ISerializationContext context, TypeCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.TYPE_COMMAND__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.TYPE_COMMAND__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeCommandAccess().getValValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (val=Variable | str=STRING)
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
