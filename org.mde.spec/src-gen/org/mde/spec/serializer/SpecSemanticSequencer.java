/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mde.spec.services.SpecGrammarAccess;
import org.mde.spec.spec.ClickCommand;
import org.mde.spec.spec.Command;
import org.mde.spec.spec.ElementInScreen;
import org.mde.spec.spec.Model;
import org.mde.spec.spec.OpenCommand;
import org.mde.spec.spec.PropertyCommand;
import org.mde.spec.spec.RememberCommand;
import org.mde.spec.spec.SelectCommand;
import org.mde.spec.spec.Selector;
import org.mde.spec.spec.SleepCommand;
import org.mde.spec.spec.SpecPackage;
import org.mde.spec.spec.StoreCommand;
import org.mde.spec.spec.TypeCommand;
import org.mde.spec.spec.Variable;
import org.mde.spec.spec.VariableOrValue;

@SuppressWarnings("all")
public class SpecSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SpecGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SpecPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpecPackage.CLICK_COMMAND:
				sequence_ClickCommand(context, (ClickCommand) semanticObject); 
				return; 
			case SpecPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case SpecPackage.ELEMENT_IN_SCREEN:
				sequence_ElementInScreen(context, (ElementInScreen) semanticObject); 
				return; 
			case SpecPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SpecPackage.OPEN_COMMAND:
				sequence_OpenCommand(context, (OpenCommand) semanticObject); 
				return; 
			case SpecPackage.PROPERTY_COMMAND:
				sequence_PropertyCommand(context, (PropertyCommand) semanticObject); 
				return; 
			case SpecPackage.REMEMBER_COMMAND:
				sequence_RememberCommand(context, (RememberCommand) semanticObject); 
				return; 
			case SpecPackage.SELECT_COMMAND:
				sequence_SelectCommand(context, (SelectCommand) semanticObject); 
				return; 
			case SpecPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case SpecPackage.SLEEP_COMMAND:
				sequence_SleepCommand(context, (SleepCommand) semanticObject); 
				return; 
			case SpecPackage.STORE_COMMAND:
				sequence_StoreCommand(context, (StoreCommand) semanticObject); 
				return; 
			case SpecPackage.TYPE_COMMAND:
				sequence_TypeCommand(context, (TypeCommand) semanticObject); 
				return; 
			case SpecPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case SpecPackage.VARIABLE_OR_VALUE:
				sequence_VariableOrValue(context, (VariableOrValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns ClickCommand
	 *     ClickCommand returns ClickCommand
	 *
	 * Constraint:
	 *     (cmd='Click' | selector=Selector | point=Point)
	 */
	protected void sequence_ClickCommand(ISerializationContext context, ClickCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (comment=SL_COMMENT | custom=CUSTOM_COMMAND)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementInScreen returns ElementInScreen
	 *
	 * Constraint:
	 *     element=ID
	 */
	protected void sequence_ElementInScreen(ISerializationContext context, ElementInScreen semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.ELEMENT_IN_SCREEN__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.ELEMENT_IN_SCREEN__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementInScreenAccess().getElementIDTerminalRuleCall_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns OpenCommand
	 *     OpenCommand returns OpenCommand
	 *
	 * Constraint:
	 *     value=VariableOrValue
	 */
	protected void sequence_OpenCommand(ISerializationContext context, OpenCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.OPEN_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.OPEN_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOpenCommandAccess().getValueVariableOrValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns PropertyCommand
	 *     PropertyCommand returns PropertyCommand
	 *
	 * Constraint:
	 *     (prop=Property cond=Condition val=VariableOrValue)
	 */
	protected void sequence_PropertyCommand(ISerializationContext context, PropertyCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__PROP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__PROP));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__COND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__COND));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.PROPERTY_COMMAND__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyCommandAccess().getPropPropertyParserRuleCall_1_0(), semanticObject.getProp());
		feeder.accept(grammarAccess.getPropertyCommandAccess().getCondConditionParserRuleCall_2_0(), semanticObject.getCond());
		feeder.accept(grammarAccess.getPropertyCommandAccess().getValVariableOrValueParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns RememberCommand
	 *     RememberCommand returns RememberCommand
	 *
	 * Constraint:
	 *     (prop=Property var=Variable)
	 */
	protected void sequence_RememberCommand(ISerializationContext context, RememberCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__PROP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__PROP));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.REMEMBER_COMMAND__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRememberCommandAccess().getPropPropertyParserRuleCall_1_0(), semanticObject.getProp());
		feeder.accept(grammarAccess.getRememberCommandAccess().getVarVariableParserRuleCall_3_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns SelectCommand
	 *     SelectCommand returns SelectCommand
	 *
	 * Constraint:
	 *     (value=Selector | value=Selector | value=Selector)
	 */
	protected void sequence_SelectCommand(ISerializationContext context, SelectCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (var=VariableOrValue | (type=ElementType val=VariableOrValue))
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns SleepCommand
	 *     SleepCommand returns SleepCommand
	 *
	 * Constraint:
	 *     time=INT
	 */
	protected void sequence_SleepCommand(ISerializationContext context, SleepCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.SLEEP_COMMAND__TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.SLEEP_COMMAND__TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSleepCommandAccess().getTimeINTTerminalRuleCall_2_0(), semanticObject.getTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns StoreCommand
	 *     StoreCommand returns StoreCommand
	 *
	 * Constraint:
	 *     (name=Variable value=STRING)
	 */
	protected void sequence_StoreCommand(ISerializationContext context, StoreCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.STORE_COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.STORE_COMMAND__NAME));
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.STORE_COMMAND__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.STORE_COMMAND__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStoreCommandAccess().getNameVariableParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStoreCommandAccess().getValueSTRINGTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TypeCommand
	 *     TypeCommand returns TypeCommand
	 *
	 * Constraint:
	 *     val=VariableOrValue
	 */
	protected void sequence_TypeCommand(ISerializationContext context, TypeCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.TYPE_COMMAND__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.TYPE_COMMAND__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeCommandAccess().getValVariableOrValueParserRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableOrValue returns VariableOrValue
	 *
	 * Constraint:
	 *     (var=[Variable|ID] | val=STRING | element=ElementInScreen)
	 */
	protected void sequence_VariableOrValue(ISerializationContext context, VariableOrValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
