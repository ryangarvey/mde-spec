/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.mde.spec.src.org.mde.spec.Spec.xtext.Variable
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference
import org.mde.spec.src.org.mde.spec.LoopStatement
import org.mde.spec.src.org.mde.spec.VariableDeclaration
import static extension org.eclipse.xtext.EcoreUtil2.*

import static org.eclipse.xtext.scoping.Scopes.*

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SpecScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_Variable_name(Variable context, EReference ref) {
		val containingLoopStatement = context.getContextOfType(LoopStatement)
				
		if(containingLoopStatement !== null) {
			containingLoopStatement.visibleVariablesScope
		}
		else {
			val containingProgram = context.getContainerOfType(Spec)
			
			scopeFor(containingProgram.statements.filter(VariableDeclaration))
		}
	}
	def IScope visibleVariableScope(EObject context) {
		if(context instanceof LoopStatement) {
			scopeFor(context.statements.filter(VariableDeclaration), context.eContainer.visibleVariablesScope)
		}
		else if(context instanceof Spec) {
			scopeFor(context.statements.filter(VariableDeclaration))
		}
	}
}
//This is the rough outline but Steffen said in his video that it's not quite a complete solution