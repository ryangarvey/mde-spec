/*
 * generated by Xtext 2.20.0
 */
grammar InternalSpec;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.mde.spec.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mde.spec.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mde.spec.services.SpecGrammarAccess;

}
@parser::members {
	private SpecGrammarAccess grammarAccess;

	public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getCommandsAssignment()); }
		(rule__Model__CommandsAssignment)*
		{ after(grammarAccess.getModelAccess().getCommandsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOpenCommand
entryRuleOpenCommand
:
{ before(grammarAccess.getOpenCommandRule()); }
	 ruleOpenCommand
{ after(grammarAccess.getOpenCommandRule()); } 
	 EOF 
;

// Rule OpenCommand
ruleOpenCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpenCommandAccess().getGroup()); }
		(rule__OpenCommand__Group__0)
		{ after(grammarAccess.getOpenCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClickCommand
entryRuleClickCommand
:
{ before(grammarAccess.getClickCommandRule()); }
	 ruleClickCommand
{ after(grammarAccess.getClickCommandRule()); } 
	 EOF 
;

// Rule ClickCommand
ruleClickCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickCommandAccess().getGroup()); }
		(rule__ClickCommand__Group__0)
		{ after(grammarAccess.getClickCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectCommand
entryRuleSelectCommand
:
{ before(grammarAccess.getSelectCommandRule()); }
	 ruleSelectCommand
{ after(grammarAccess.getSelectCommandRule()); } 
	 EOF 
;

// Rule SelectCommand
ruleSelectCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectCommandAccess().getAlternatives()); }
		(rule__SelectCommand__Alternatives)
		{ after(grammarAccess.getSelectCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelector
entryRuleSelector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorAccess().getGroup()); }
		(rule__Selector__Group__0)
		{ after(grammarAccess.getSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePropertyCommand
entryRulePropertyCommand
:
{ before(grammarAccess.getPropertyCommandRule()); }
	 rulePropertyCommand
{ after(grammarAccess.getPropertyCommandRule()); } 
	 EOF 
;

// Rule PropertyCommand
rulePropertyCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getGroup()); }
		(rule__PropertyCommand__Group__0)
		{ after(grammarAccess.getPropertyCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeCommand
entryRuleTypeCommand
:
{ before(grammarAccess.getTypeCommandRule()); }
	 ruleTypeCommand
{ after(grammarAccess.getTypeCommandRule()); } 
	 EOF 
;

// Rule TypeCommand
ruleTypeCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeCommandAccess().getGroup()); }
		(rule__TypeCommand__Group__0)
		{ after(grammarAccess.getTypeCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSleepCommand
entryRuleSleepCommand
:
{ before(grammarAccess.getSleepCommandRule()); }
	 ruleSleepCommand
{ after(grammarAccess.getSleepCommandRule()); } 
	 EOF 
;

// Rule SleepCommand
ruleSleepCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSleepCommandAccess().getGroup()); }
		(rule__SleepCommand__Group__0)
		{ after(grammarAccess.getSleepCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePoint
entryRulePoint
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointAccess().getGroup()); }
		(rule__Point__Group__0)
		{ after(grammarAccess.getPointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ElementType
ruleElementType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementTypeAccess().getAlternatives()); }
		(rule__ElementType__Alternatives)
		{ after(grammarAccess.getElementTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Property
ruleProperty
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getAlternatives()); }
		(rule__Property__Alternatives)
		{ after(grammarAccess.getPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Condition
ruleCondition
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getAlternatives()); }
		(rule__Condition__Alternatives)
		{ after(grammarAccess.getConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getOpenCommandParserRuleCall_0()); }
		ruleOpenCommand
		{ after(grammarAccess.getCommandAccess().getOpenCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getClickCommandParserRuleCall_1()); }
		ruleClickCommand
		{ after(grammarAccess.getCommandAccess().getClickCommandParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getSelectCommandParserRuleCall_2()); }
		ruleSelectCommand
		{ after(grammarAccess.getCommandAccess().getSelectCommandParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getPropertyCommandParserRuleCall_3()); }
		rulePropertyCommand
		{ after(grammarAccess.getCommandAccess().getPropertyCommandParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getTypeCommandParserRuleCall_4()); }
		ruleTypeCommand
		{ after(grammarAccess.getCommandAccess().getTypeCommandParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getSleepCommandParserRuleCall_5()); }
		ruleSleepCommand
		{ after(grammarAccess.getCommandAccess().getSleepCommandParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_6()); }
		(rule__Command__Group_6__0)
		{ after(grammarAccess.getCommandAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getCustomAssignment_7()); }
		(rule__Command__CustomAssignment_7)
		{ after(grammarAccess.getCommandAccess().getCustomAssignment_7()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getVarDeclarationParserRuleCall_8()); }
		ruleVarDeclaration
		{ after(grammarAccess.getCommandAccess().getVarDeclarationParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenCommandAccess().getValAssignment_2_0()); }
		(rule__OpenCommand__ValAssignment_2_0)
		{ after(grammarAccess.getOpenCommandAccess().getValAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpenCommandAccess().getVarAssignment_2_1()); }
		(rule__OpenCommand__VarAssignment_2_1)
		{ after(grammarAccess.getOpenCommandAccess().getVarAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickCommandAccess().getGroup_1_0()); }
		(rule__ClickCommand__Group_1_0__0)
		{ after(grammarAccess.getClickCommandAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getClickCommandAccess().getGroup_1_1()); }
		(rule__ClickCommand__Group_1_1__0)
		{ after(grammarAccess.getClickCommandAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectCommandAccess().getGroup_0()); }
		(rule__SelectCommand__Group_0__0)
		{ after(grammarAccess.getSelectCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectCommandAccess().getGroup_1()); }
		(rule__SelectCommand__Group_1__0)
		{ after(grammarAccess.getSelectCommandAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getVarAssignment_1_0()); }
		(rule__Selector__VarAssignment_1_0)
		{ after(grammarAccess.getSelectorAccess().getVarAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelectorAccess().getValAssignment_1_1()); }
		(rule__Selector__ValAssignment_1_1)
		{ after(grammarAccess.getSelectorAccess().getValAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getValAssignment_3_0()); }
		(rule__PropertyCommand__ValAssignment_3_0)
		{ after(grammarAccess.getPropertyCommandAccess().getValAssignment_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyCommandAccess().getVarAssignment_3_1()); }
		(rule__PropertyCommand__VarAssignment_3_1)
		{ after(grammarAccess.getPropertyCommandAccess().getVarAssignment_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCommandAccess().getStrAssignment_1_0()); }
		(rule__TypeCommand__StrAssignment_1_0)
		{ after(grammarAccess.getTypeCommandAccess().getStrAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeCommandAccess().getVarAssignment_1_1()); }
		(rule__TypeCommand__VarAssignment_1_1)
		{ after(grammarAccess.getTypeCommandAccess().getVarAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSleepCommandAccess().getSecondKeyword_3_0()); }
		'second'
		{ after(grammarAccess.getSleepCommandAccess().getSecondKeyword_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getSleepCommandAccess().getSecondsKeyword_3_1()); }
		'seconds'
		{ after(grammarAccess.getSleepCommandAccess().getSecondsKeyword_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementTypeAccess().getButtonEnumLiteralDeclaration_0()); }
		('button')
		{ after(grammarAccess.getElementTypeAccess().getButtonEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementTypeAccess().getElementEnumLiteralDeclaration_1()); }
		('element')
		{ after(grammarAccess.getElementTypeAccess().getElementEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementTypeAccess().getLinkEnumLiteralDeclaration_2()); }
		('link')
		{ after(grammarAccess.getElementTypeAccess().getLinkEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementTypeAccess().getInputEnumLiteralDeclaration_3()); }
		('input')
		{ after(grammarAccess.getElementTypeAccess().getInputEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getElementTypeAccess().getTextareaEnumLiteralDeclaration_4()); }
		('textarea')
		{ after(grammarAccess.getElementTypeAccess().getTextareaEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getTextEnumLiteralDeclaration_0()); }
		('text')
		{ after(grammarAccess.getPropertyAccess().getTextEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getClassEnumLiteralDeclaration_1()); }
		('class')
		{ after(grammarAccess.getPropertyAccess().getClassEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getValueEnumLiteralDeclaration_2()); }
		('value')
		{ after(grammarAccess.getPropertyAccess().getValueEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getShouldBeEnumLiteralDeclaration_0()); }
		('should be')
		{ after(grammarAccess.getConditionAccess().getShouldBeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getShouldNotBeEnumLiteralDeclaration_1()); }
		('should not be')
		{ after(grammarAccess.getConditionAccess().getShouldNotBeEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_6__0__Impl
	rule__Command__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getCommandAction_6_0()); }
	()
	{ after(grammarAccess.getCommandAccess().getCommandAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getSL_COMMENTTerminalRuleCall_6_1()); }
	RULE_SL_COMMENT
	{ after(grammarAccess.getCommandAccess().getSL_COMMENTTerminalRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OpenCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpenCommand__Group__0__Impl
	rule__OpenCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenCommandAccess().getOpenCommandAction_0()); }
	()
	{ after(grammarAccess.getOpenCommandAccess().getOpenCommandAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpenCommand__Group__1__Impl
	rule__OpenCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenCommandAccess().getNameAssignment_1()); }
	(rule__OpenCommand__NameAssignment_1)
	{ after(grammarAccess.getOpenCommandAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OpenCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOpenCommandAccess().getAlternatives_2()); }
	(rule__OpenCommand__Alternatives_2)
	{ after(grammarAccess.getOpenCommandAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClickCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group__0__Impl
	rule__ClickCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getNameAssignment_0()); }
	(rule__ClickCommand__NameAssignment_0)
	{ after(grammarAccess.getClickCommandAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getAlternatives_1()); }
	(rule__ClickCommand__Alternatives_1)?
	{ after(grammarAccess.getClickCommandAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClickCommand__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group_1_0__0__Impl
	rule__ClickCommand__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getOnKeyword_1_0_0()); }
	'on'
	{ after(grammarAccess.getClickCommandAccess().getOnKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getSelectorAssignment_1_0_1()); }
	(rule__ClickCommand__SelectorAssignment_1_0_1)
	{ after(grammarAccess.getClickCommandAccess().getSelectorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClickCommand__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group_1_1__0__Impl
	rule__ClickCommand__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getAtKeyword_1_1_0()); }
	'at'
	{ after(grammarAccess.getClickCommandAccess().getAtKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClickCommand__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickCommandAccess().getPointAssignment_1_1_1()); }
	(rule__ClickCommand__PointAssignment_1_1_1)
	{ after(grammarAccess.getClickCommandAccess().getPointAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectCommand__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectCommand__Group_0__0__Impl
	rule__SelectCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectCommandAccess().getNameAssignment_0_0()); }
	(rule__SelectCommand__NameAssignment_0_0)
	{ after(grammarAccess.getSelectCommandAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectCommand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectCommandAccess().getValueAssignment_0_1()); }
	(rule__SelectCommand__ValueAssignment_0_1)
	{ after(grammarAccess.getSelectCommandAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectCommand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectCommand__Group_1__0__Impl
	rule__SelectCommand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectCommandAccess().getNameAssignment_1_0()); }
	(rule__SelectCommand__NameAssignment_1_0)
	{ after(grammarAccess.getSelectCommandAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectCommand__Group_1__1__Impl
	rule__SelectCommand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectCommandAccess().getVisibleKeyword_1_1()); }
	('visible')?
	{ after(grammarAccess.getSelectCommandAccess().getVisibleKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectCommand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectCommandAccess().getValueAssignment_1_2()); }
	(rule__SelectCommand__ValueAssignment_1_2)
	{ after(grammarAccess.getSelectCommandAccess().getValueAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getTypeAssignment_0()); }
	(rule__Selector__TypeAssignment_0)?
	{ after(grammarAccess.getSelectorAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getAlternatives_1()); }
	(rule__Selector__Alternatives_1)
	{ after(grammarAccess.getSelectorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyCommand__Group__0__Impl
	rule__PropertyCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyCommandAccess().getNameAssignment_0()); }
	(rule__PropertyCommand__NameAssignment_0)
	{ after(grammarAccess.getPropertyCommandAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyCommand__Group__1__Impl
	rule__PropertyCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyCommandAccess().getPropAssignment_1()); }
	(rule__PropertyCommand__PropAssignment_1)
	{ after(grammarAccess.getPropertyCommandAccess().getPropAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyCommand__Group__2__Impl
	rule__PropertyCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyCommandAccess().getCondAssignment_2()); }
	(rule__PropertyCommand__CondAssignment_2)
	{ after(grammarAccess.getPropertyCommandAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PropertyCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyCommandAccess().getAlternatives_3()); }
	(rule__PropertyCommand__Alternatives_3)
	{ after(grammarAccess.getPropertyCommandAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCommand__Group__0__Impl
	rule__TypeCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCommandAccess().getNameAssignment_0()); }
	(rule__TypeCommand__NameAssignment_0)
	{ after(grammarAccess.getTypeCommandAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCommand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCommandAccess().getAlternatives_1()); }
	(rule__TypeCommand__Alternatives_1)
	{ after(grammarAccess.getTypeCommandAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SleepCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SleepCommand__Group__0__Impl
	rule__SleepCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSleepCommandAccess().getNameAssignment_0()); }
	(rule__SleepCommand__NameAssignment_0)
	{ after(grammarAccess.getSleepCommandAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SleepCommand__Group__1__Impl
	rule__SleepCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSleepCommandAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getSleepCommandAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SleepCommand__Group__2__Impl
	rule__SleepCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSleepCommandAccess().getTimeAssignment_2()); }
	(rule__SleepCommand__TimeAssignment_2)
	{ after(grammarAccess.getSleepCommandAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SleepCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSleepCommandAccess().getAlternatives_3()); }
	(rule__SleepCommand__Alternatives_3)
	{ after(grammarAccess.getSleepCommandAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__0__Impl
	rule__Point__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getPointAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__1__Impl
	rule__Point__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getXAssignment_1()); }
	(rule__Point__XAssignment_1)
	{ after(grammarAccess.getPointAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__2__Impl
	rule__Point__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getPointAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__3__Impl
	rule__Point__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getYAssignment_3()); }
	(rule__Point__YAssignment_3)
	{ after(grammarAccess.getPointAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getPointAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getStoreKeyword_0()); }
	'Store'
	{ after(grammarAccess.getVarDeclarationAccess().getStoreKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
	(rule__VarDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
	rule__VarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getVarDeclarationAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getValueAssignment_3()); }
	(rule__VarDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVarDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__CommandsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
		ruleCommand
		{ after(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__CustomAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getCustomCUSTOM_COMMANDTerminalRuleCall_7_0()); }
		RULE_CUSTOM_COMMAND
		{ after(grammarAccess.getCommandAccess().getCustomCUSTOM_COMMANDTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenCommandAccess().getNameOpenKeyword_1_0()); }
		(
			{ before(grammarAccess.getOpenCommandAccess().getNameOpenKeyword_1_0()); }
			'Open'
			{ after(grammarAccess.getOpenCommandAccess().getNameOpenKeyword_1_0()); }
		)
		{ after(grammarAccess.getOpenCommandAccess().getNameOpenKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__ValAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenCommandAccess().getValSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getOpenCommandAccess().getValSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenCommand__VarAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpenCommandAccess().getVarVarDeclarationCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getOpenCommandAccess().getVarVarDeclarationIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOpenCommandAccess().getVarVarDeclarationIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getOpenCommandAccess().getVarVarDeclarationCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickCommandAccess().getNameClickKeyword_0_0()); }
		(
			{ before(grammarAccess.getClickCommandAccess().getNameClickKeyword_0_0()); }
			'Click'
			{ after(grammarAccess.getClickCommandAccess().getNameClickKeyword_0_0()); }
		)
		{ after(grammarAccess.getClickCommandAccess().getNameClickKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__SelectorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickCommandAccess().getSelectorSelectorParserRuleCall_1_0_1_0()); }
		ruleSelector
		{ after(grammarAccess.getClickCommandAccess().getSelectorSelectorParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickCommand__PointAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickCommandAccess().getPointPointParserRuleCall_1_1_1_0()); }
		rulePoint
		{ after(grammarAccess.getClickCommandAccess().getPointPointParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectCommandAccess().getNameWithinKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getSelectCommandAccess().getNameWithinKeyword_0_0_0()); }
			'Within'
			{ after(grammarAccess.getSelectCommandAccess().getNameWithinKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getSelectCommandAccess().getNameWithinKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_0_1_0()); }
		ruleSelector
		{ after(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectCommandAccess().getNameSelectKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getSelectCommandAccess().getNameSelectKeyword_1_0_0()); }
			'Select'
			{ after(grammarAccess.getSelectCommandAccess().getNameSelectKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getSelectCommandAccess().getNameSelectKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectCommand__ValueAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_1_2_0()); }
		ruleSelector
		{ after(grammarAccess.getSelectCommandAccess().getValueSelectorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getTypeElementTypeEnumRuleCall_0_0()); }
		ruleElementType
		{ after(grammarAccess.getSelectorAccess().getTypeElementTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__VarAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getVarVarDeclarationCrossReference_1_0_0()); }
		(
			{ before(grammarAccess.getSelectorAccess().getVarVarDeclarationIDTerminalRuleCall_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSelectorAccess().getVarVarDeclarationIDTerminalRuleCall_1_0_0_1()); }
		)
		{ after(grammarAccess.getSelectorAccess().getVarVarDeclarationCrossReference_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__ValAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectorAccess().getValSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectorAccess().getValSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getNamePropertyKeyword_0_0()); }
		(
			{ before(grammarAccess.getPropertyCommandAccess().getNamePropertyKeyword_0_0()); }
			'Property'
			{ after(grammarAccess.getPropertyCommandAccess().getNamePropertyKeyword_0_0()); }
		)
		{ after(grammarAccess.getPropertyCommandAccess().getNamePropertyKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__PropAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getPropPropertyEnumRuleCall_1_0()); }
		ruleProperty
		{ after(grammarAccess.getPropertyCommandAccess().getPropPropertyEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getCondConditionEnumRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getPropertyCommandAccess().getCondConditionEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__ValAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getValSTRINGTerminalRuleCall_3_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getPropertyCommandAccess().getValSTRINGTerminalRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCommand__VarAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyCommandAccess().getVarVarDeclarationCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getPropertyCommandAccess().getVarVarDeclarationIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPropertyCommandAccess().getVarVarDeclarationIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getPropertyCommandAccess().getVarVarDeclarationCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCommandAccess().getNameTypeKeyword_0_0()); }
		(
			{ before(grammarAccess.getTypeCommandAccess().getNameTypeKeyword_0_0()); }
			'Type'
			{ after(grammarAccess.getTypeCommandAccess().getNameTypeKeyword_0_0()); }
		)
		{ after(grammarAccess.getTypeCommandAccess().getNameTypeKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__StrAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCommandAccess().getStrSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getTypeCommandAccess().getStrSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCommand__VarAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeCommandAccess().getVarVarDeclarationCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getTypeCommandAccess().getVarVarDeclarationIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTypeCommandAccess().getVarVarDeclarationIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getTypeCommandAccess().getVarVarDeclarationCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSleepCommandAccess().getNameSleepKeyword_0_0()); }
		(
			{ before(grammarAccess.getSleepCommandAccess().getNameSleepKeyword_0_0()); }
			'Sleep'
			{ after(grammarAccess.getSleepCommandAccess().getNameSleepKeyword_0_0()); }
		)
		{ after(grammarAccess.getSleepCommandAccess().getNameSleepKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SleepCommand__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSleepCommandAccess().getTimeINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSleepCommandAccess().getTimeINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getValueSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getVarDeclarationAccess().getValueSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CUSTOM_COMMAND : '!' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
