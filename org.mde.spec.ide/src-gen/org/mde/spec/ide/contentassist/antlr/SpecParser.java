/*
 * generated by Xtext 2.20.0
 */
package org.mde.spec.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.mde.spec.ide.contentassist.antlr.internal.InternalSpecParser;
import org.mde.spec.services.SpecGrammarAccess;

public class SpecParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpecGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpecGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getClickCommandAccess().getAlternatives(), "rule__ClickCommand__Alternatives");
			builder.put(grammarAccess.getSelectCommandAccess().getAlternatives(), "rule__SelectCommand__Alternatives");
			builder.put(grammarAccess.getSleepCommandAccess().getAlternatives_3(), "rule__SleepCommand__Alternatives_3");
			builder.put(grammarAccess.getSelectorAccess().getAlternatives(), "rule__Selector__Alternatives");
			builder.put(grammarAccess.getPropertyTypeAccess().getAlternatives(), "rule__PropertyType__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getElementTypeAccess().getAlternatives(), "rule__ElementType__Alternatives");
			builder.put(grammarAccess.getOpenCommandAccess().getGroup(), "rule__OpenCommand__Group__0");
			builder.put(grammarAccess.getClickCommandAccess().getGroup_1(), "rule__ClickCommand__Group_1__0");
			builder.put(grammarAccess.getClickCommandAccess().getGroup_2(), "rule__ClickCommand__Group_2__0");
			builder.put(grammarAccess.getCommentCommandAccess().getGroup(), "rule__CommentCommand__Group__0");
			builder.put(grammarAccess.getSelectCommandAccess().getGroup_0(), "rule__SelectCommand__Group_0__0");
			builder.put(grammarAccess.getSelectCommandAccess().getGroup_1(), "rule__SelectCommand__Group_1__0");
			builder.put(grammarAccess.getSelectCommandAccess().getGroup_2(), "rule__SelectCommand__Group_2__0");
			builder.put(grammarAccess.getRememberCommandAccess().getGroup(), "rule__RememberCommand__Group__0");
			builder.put(grammarAccess.getPropertyCommandAccess().getGroup(), "rule__PropertyCommand__Group__0");
			builder.put(grammarAccess.getTypeCommandAccess().getGroup(), "rule__TypeCommand__Group__0");
			builder.put(grammarAccess.getSleepCommandAccess().getGroup(), "rule__SleepCommand__Group__0");
			builder.put(grammarAccess.getCustomCommandAccess().getGroup(), "rule__CustomCommand__Group__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_1(), "rule__Selector__Group_1__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup_3(), "rule__Selector__Group_3__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_0(), "rule__Condition__Group_0__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getModelAccess().getCommandsAssignment(), "rule__Model__CommandsAssignment");
			builder.put(grammarAccess.getOpenCommandAccess().getValueAssignment_1(), "rule__OpenCommand__ValueAssignment_1");
			builder.put(grammarAccess.getClickCommandAccess().getCmdAssignment_0(), "rule__ClickCommand__CmdAssignment_0");
			builder.put(grammarAccess.getClickCommandAccess().getSelectorAssignment_1_2(), "rule__ClickCommand__SelectorAssignment_1_2");
			builder.put(grammarAccess.getClickCommandAccess().getPointAssignment_2_2(), "rule__ClickCommand__PointAssignment_2_2");
			builder.put(grammarAccess.getCommentCommandAccess().getStrAssignment_1(), "rule__CommentCommand__StrAssignment_1");
			builder.put(grammarAccess.getSelectCommandAccess().getValueAssignment_0_1(), "rule__SelectCommand__ValueAssignment_0_1");
			builder.put(grammarAccess.getSelectCommandAccess().getValueAssignment_1_1(), "rule__SelectCommand__ValueAssignment_1_1");
			builder.put(grammarAccess.getSelectCommandAccess().getValueAssignment_2_2(), "rule__SelectCommand__ValueAssignment_2_2");
			builder.put(grammarAccess.getRememberCommandAccess().getPropAssignment_1(), "rule__RememberCommand__PropAssignment_1");
			builder.put(grammarAccess.getRememberCommandAccess().getVarAssignment_3(), "rule__RememberCommand__VarAssignment_3");
			builder.put(grammarAccess.getPropertyCommandAccess().getPropAssignment_1(), "rule__PropertyCommand__PropAssignment_1");
			builder.put(grammarAccess.getPropertyCommandAccess().getCondAssignment_2(), "rule__PropertyCommand__CondAssignment_2");
			builder.put(grammarAccess.getPropertyCommandAccess().getValAssignment_3(), "rule__PropertyCommand__ValAssignment_3");
			builder.put(grammarAccess.getTypeCommandAccess().getValAssignment_1(), "rule__TypeCommand__ValAssignment_1");
			builder.put(grammarAccess.getSleepCommandAccess().getTimeAssignment_2(), "rule__SleepCommand__TimeAssignment_2");
			builder.put(grammarAccess.getCustomCommandAccess().getCommandAssignment_1(), "rule__CustomCommand__CommandAssignment_1");
			builder.put(grammarAccess.getSelectorAccess().getValAssignment_0(), "rule__Selector__ValAssignment_0");
			builder.put(grammarAccess.getSelectorAccess().getTypeAssignment_1_0(), "rule__Selector__TypeAssignment_1_0");
			builder.put(grammarAccess.getSelectorAccess().getValAssignment_1_1(), "rule__Selector__ValAssignment_1_1");
			builder.put(grammarAccess.getSelectorAccess().getVarAssignment_2(), "rule__Selector__VarAssignment_2");
			builder.put(grammarAccess.getSelectorAccess().getTypeAssignment_3_0(), "rule__Selector__TypeAssignment_3_0");
			builder.put(grammarAccess.getSelectorAccess().getVarAssignment_3_1(), "rule__Selector__VarAssignment_3_1");
			builder.put(grammarAccess.getValueAccess().getValAssignment_0(), "rule__Value__ValAssignment_0");
			builder.put(grammarAccess.getValueAccess().getStrAssignment_1(), "rule__Value__StrAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpecGrammarAccess grammarAccess;

	@Override
	protected InternalSpecParser createParser() {
		InternalSpecParser result = new InternalSpecParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpecGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
