grammar org.mde.spec.Spec with org.eclipse.xtext.common.Terminals

generate spec "http://www.mde.org/spec/Spec"

Model:
	commands+=Command*;
	
Command:
	OpenCommand
  | ClickCommand
  | CommentCommand
  | SelectCommand
  | RememberCommand
  | PropertyCommand
  | TypeCommand
  | SleepCommand
  | CustomCommand
;

OpenCommand:
	"Open" value=Value
;

ClickCommand:
	"Click"
  | "Click" "on" value=Selector
  | "Click" "at" value=Point
;


CommentCommand:
	"#" STRING*
;

SelectCommand:
	"Within" value=Selector
  | "Select" value=Selector
  | "Select" "visible" value=Selector
;

RememberCommand:
	"Remember" prop=Property "as" var=Variable
;

PropertyCommand:
	"Property" prop=Property cond=Condition val=Value
;
	
TypeCommand:
	"Type" val=Value
;

SleepCommand:
	"Sleep" "for" time=INT ("second" | "seconds")
;

CustomCommand:
	"!" command=STRING
;

ElementType:
    "button"
  | "element"
  | "link"
  | "input"
  | "textarea"
;

Selector:
    nqString                
  | elementType val=nqString
  | btstring
  | ElementType val=btstring
  | variable                
  | ElementType val=variable
;

Property:
	PropertyType
;

PropertyType:
    "text"
  | "class"
  | "value"
;
	
	
	# Open it with Markdown syntax highlighting
@builtin "whitespace.ne"
@builtin "string.ne"
@builtin "number.ne"


# Any word
anyWord -> [^\s]:+ {% function(d) {return d[0].join(""); } %}

# No quotes string
nqString -> [^\s\"\'\`\$]:+ {% function(d) {return d[0].join(""); } %}

# Property
property ->
    propertyType            {% function(d) {return {type: 'property', value: d[0][0]}} %}

propertyType ->
    "text"
  | "class"
  | "value"

# Value
# Can be a quoted string or a variable value
value ->
    variable
  | stringValue

# Condition
condition ->
    "should be"             {% function(d) {return {type: 'condition', value: 'equal'}} %}
  | "should not be"         {% function(d) {return {type: 'condition', value: '!equal'}} %}

# Point
point ->
  "{" int "," int "}" {% function (d) {return {type: 'point', value: {x: d[1], y: d[3]}}} %}

# Variable
variable -> "$" anyWord     {% function (d) {return {type: 'variable', value: d[1]}} %}

# String value
stringValue ->
    btstring                {% function(d) {return {type: 'string', value: d[0]}} %}
	